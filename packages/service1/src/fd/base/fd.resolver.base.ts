/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteFdArgs } from "./DeleteFdArgs";
import { FdFindManyArgs } from "./FdFindManyArgs";
import { FdFindUniqueArgs } from "./FdFindUniqueArgs";
import { Fd } from "./Fd";
import { FdService } from "../fd.service";

@graphql.Resolver(() => Fd)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FdResolverBase {
  constructor(
    protected readonly service: FdService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Fd",
    action: "read",
    possession: "any",
  })
  async _fdsMeta(
    @graphql.Args() args: FdFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Fd])
  @nestAccessControl.UseRoles({
    resource: "Fd",
    action: "read",
    possession: "any",
  })
  async fds(@graphql.Args() args: FdFindManyArgs): Promise<Fd[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Fd, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Fd",
    action: "read",
    possession: "own",
  })
  async fd(@graphql.Args() args: FdFindUniqueArgs): Promise<Fd | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Fd)
  @nestAccessControl.UseRoles({
    resource: "Fd",
    action: "delete",
    possession: "any",
  })
  async deleteFd(@graphql.Args() args: DeleteFdArgs): Promise<Fd | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
